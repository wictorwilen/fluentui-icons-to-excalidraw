name: Deploy Fluent Jot to Azure Static Web Apps

on:
  # On-demand deployment only
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all Excalidraw files (ignore cache)'
        required: false
        default: false
        type: boolean
      deployment_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'
        type: string

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Fluent Jot
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('web/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up environment variables
        run: |
          echo "FORCE_REBUILD=${{ github.event.inputs.force_rebuild }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_MESSAGE=${{ github.event.inputs.deployment_message }}" >> $GITHUB_ENV
          echo "üîß Environment configured"

      - name: Download pre-built Excalidraw artifacts from latest release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üì¶ Downloading pre-built Excalidraw artifacts from latest release..."
          
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "üîÑ Force rebuild requested - will regenerate from source SVGs"
            
            # Install Python dependencies for SVG processing
            echo "üêç Setting up Python dependencies..."
            python -m pip install --upgrade pip
            
            if [ -f "requirements.txt" ]; then
              echo "üìã Installing from requirements.txt..."
              pip install -r requirements.txt
              echo "‚úÖ Installed Python dependencies"
            else
              echo "‚ùå requirements.txt not found"
              exit 1
            fi
            
            # Create directories
            mkdir -p metadata vendor/icons vendor/emojis
            
            # Fetch icons and emojis
            echo "üì• Downloading Fluent UI icons and metadata..."
            python3 scripts/fetch_icons.py \
              --output metadata/icons.json \
              --download-dir vendor/icons \
              --force
            
            echo "üòÄ Downloading Fluent UI emojis and metadata..."
            python3 scripts/fetch_emojis.py \
              --output metadata/emojis.json \
              --download-dir vendor/emojis \
              --force \
              --preferred-style flat
            
            # Generate Excalidraw files
            echo "üé® Generating icon Excalidraw files..."
            python3 scripts/svg_to_excalidraw.py \
              --input-dir vendor/icons/assets \
              --output-dir artifacts/excalidraw
            
            echo "üòÄ Generating emoji Excalidraw files..."
            python3 scripts/emoji_to_excalidraw.py \
              --input-dir vendor/emojis/assets \
              --output-dir artifacts/excalidraw_emojis
              
            excalidraw_icon_count=$(find artifacts/excalidraw -name '*.excalidraw' | wc -l)
            excalidraw_emoji_count=$(find artifacts/excalidraw_emojis -name '*.excalidraw' | wc -l)
            echo "‚úÖ Generated $excalidraw_icon_count icon files and $excalidraw_emoji_count emoji files from source"
          else
            echo "ÔøΩ Using optimized release artifacts download..."
            
            # Get the latest release
            LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            
            RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
            echo "üìã Latest release: $RELEASE_TAG"
            
            # Download the pre-built excalidraw scenes and metadata from the same release
            SCENES_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("excalidraw-scenes-")) | .browser_download_url')
            EMOJI_SCENES_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("excalidraw-emoji-scenes-")) | .browser_download_url')
            ICONS_METADATA_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("icons-metadata-")) | .browser_download_url')
            EMOJIS_METADATA_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("emojis-metadata-")) | .browser_download_url')
            
            if [ "$SCENES_URL" != "null" ] && [ "$EMOJI_SCENES_URL" != "null" ] && [ "$ICONS_METADATA_URL" != "null" ] && [ "$EMOJIS_METADATA_URL" != "null" ]; then
              # Create metadata directory
              mkdir -p metadata
              
              echo "üì• Downloading icon scenes from: $SCENES_URL"
              curl -L -H "Authorization: token $GITHUB_TOKEN" "$SCENES_URL" -o excalidraw-scenes.zip
              
              echo "üì• Downloading emoji scenes from: $EMOJI_SCENES_URL"
              curl -L -H "Authorization: token $GITHUB_TOKEN" "$EMOJI_SCENES_URL" -o excalidraw-emoji-scenes.zip
              
              echo "üì• Downloading icon metadata from: $ICONS_METADATA_URL"
              curl -L -H "Authorization: token $GITHUB_TOKEN" "$ICONS_METADATA_URL" -o metadata/icons.json
              
              echo "üì• Downloading emoji metadata from: $EMOJIS_METADATA_URL"
              curl -L -H "Authorization: token $GITHUB_TOKEN" "$EMOJIS_METADATA_URL" -o metadata/emojis.json
              
              # Extract the archives
              echo "ÔøΩ Extracting icon scenes..."
              unzip -q excalidraw-scenes.zip
              
              echo "ÔøΩ Extracting emoji scenes..."
              unzip -q excalidraw-emoji-scenes.zip
              
              # Clean up zip files
              rm excalidraw-scenes.zip excalidraw-emoji-scenes.zip
              
              echo "‚úÖ Downloaded metadata from release: icons.json and emojis.json"
              
              # Verify extraction
              if [ -d "artifacts/excalidraw" ] && [ -d "artifacts/excalidraw_emojis" ]; then
                excalidraw_icon_count=$(find artifacts/excalidraw -name '*.excalidraw' | wc -l)
                excalidraw_emoji_count=$(find artifacts/excalidraw_emojis -name '*.excalidraw' | wc -l)
                echo "‚úÖ Successfully extracted $excalidraw_icon_count icon files and $excalidraw_emoji_count emoji files"
                
                if [ "$excalidraw_icon_count" -eq 0 ] || [ "$excalidraw_emoji_count" -eq 0 ]; then
                  echo "‚ùå No Excalidraw files found after extraction"
                  exit 1
                fi
              else
                echo "‚ùå Extraction failed - artifacts directories not found"
                exit 1
              fi
            else
              echo "‚ùå Could not find all required release artifacts URLs"
              echo "   Scenes: $SCENES_URL"
              echo "   Emoji scenes: $EMOJI_SCENES_URL" 
              echo "   Icon metadata: $ICONS_METADATA_URL"
              echo "   Emoji metadata: $EMOJIS_METADATA_URL"
              exit 1
            fi
          fi

      - name: Install Node.js dependencies
        run: |
          cd web
          echo "üìÇ Checking Node.js project structure..."
          ls -la
          
          # Install dependencies (use npm install if package-lock.json doesn't exist)
          if [ -f "package-lock.json" ]; then
            echo "üì¶ Using npm ci for consistent installs..."
            npm ci --no-optional
          else
            echo "üì¶ Using npm install (no lockfile found)..."
            npm install --no-optional
          fi
          echo "üì¶ Installed Node.js dependencies"

      - name: Lint and type check
        run: |
          cd web
          echo "üîç Running linting and type checks..."
          npm run lint:check
          npm run type-check
          echo "‚úÖ Code quality checks passed"

      - name: Build application
        run: |
          cd web
          echo "üèóÔ∏è Building Fluent Jot application..."
          npm run build
          echo "‚úÖ Build completed successfully"
          
          # Display build size information
          echo "üìä Build size analysis:"
          du -sh build/
          du -sh build/static/js/*.js | head -5
        env:
          CI: true
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: '--max_old_space_size=4096'

      - name: Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_POLITE_FLOWER_07D4D8403 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/web"
          output_location: "build"
          skip_api_build: true

      - name: Deployment summary
        if: success()
        run: |
          echo "üéâ Fluent Jot deployed successfully!"
          echo "üí¨ Deployment message: $DEPLOYMENT_MESSAGE"
          echo "üåê Application URL: ${{ steps.builddeploy.outputs.static_web_app_url }}"
          echo "üìä Total build assets: $(find web/build -type f | wc -l) files"
          echo "üé® Icons available: $(find artifacts/excalidraw -name '*.excalidraw' | wc -l)"
          echo "üòÄ Emojis available: $(find artifacts/excalidraw_emojis -name '*.excalidraw' | wc -l)"
          
          # Calculate total size
          build_size=$(du -sh web/build | cut -f1)
          echo "üì¶ Total build size: $build_size"