name: Deploy Fluent Jot Web App to Azure Static Web Apps

on:
  # On-demand deployment only
  workflow_dispatch:
    inputs:
      deployment_message:
        description: 'Deployment message'
        required: false
        default: 'Manual web app deployment'
        type: string
      use_latest_metadata:
        description: 'Download latest metadata from release (for data consistency)'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Fluent Jot Web App
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('web/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up environment variables
        run: |
          echo "DEPLOYMENT_MESSAGE=${{ github.event.inputs.deployment_message }}" >> $GITHUB_ENV
          echo "USE_LATEST_METADATA=${{ github.event.inputs.use_latest_metadata }}" >> $GITHUB_ENV
          echo "üîß Environment configured for web app deployment"

      - name: Download metadata from latest release (optional)
        if: github.event.inputs.use_latest_metadata == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìã Downloading latest metadata from release for data consistency..."
          
          # Get the latest release
          LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          
          RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          echo "üìã Latest release: $RELEASE_TAG"
          
          # Download metadata files
          ICONS_METADATA_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("icons-metadata-")) | .browser_download_url')
          EMOJIS_METADATA_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("emojis-metadata-")) | .browser_download_url')
          
          if [ "$ICONS_METADATA_URL" != "null" ] && [ "$EMOJIS_METADATA_URL" != "null" ]; then
            # Create metadata directory
            mkdir -p metadata
            
            echo "üì• Downloading icon metadata from: $ICONS_METADATA_URL"
            curl -L -H "Authorization: token $GITHUB_TOKEN" "$ICONS_METADATA_URL" -o metadata/icons.json
            
            echo "üì• Downloading emoji metadata from: $EMOJIS_METADATA_URL"
            curl -L -H "Authorization: token $GITHUB_TOKEN" "$EMOJIS_METADATA_URL" -o metadata/emojis.json
            
            echo "‚úÖ Downloaded metadata from release: icons.json and emojis.json"
          else
            echo "‚ö†Ô∏è  Could not find metadata URLs, using existing metadata files"
          fi

      - name: Install Node.js dependencies
        run: |
          cd web
          echo "üìÇ Installing Node.js dependencies..."
          
          # Install dependencies (use npm install if package-lock.json doesn't exist)
          if [ -f "package-lock.json" ]; then
            echo "üì¶ Using npm ci for consistent installs..."
            npm ci --no-optional
          else
            echo "üì¶ Using npm install (no lockfile found)..."
            npm install --no-optional
          fi
          echo "üì¶ Installed Node.js dependencies"

      - name: Lint and type check
        run: |
          cd web
          echo "üîç Running linting and type checks..."
          npm run lint:check
          npm run type-check
          echo "‚úÖ Code quality checks passed"

      - name: Prepare optimized deployment package
        run: |
          cd web
          echo "üßπ Preparing optimized deployment package..."
          
          # Remove the large public/excalidraw directory since files are now in blob storage
          if [ -d "public/excalidraw" ]; then
            excalidraw_size=$(du -sh public/excalidraw | cut -f1)
            rm -rf public/excalidraw
            echo "‚úÖ Removed public/excalidraw directory ($excalidraw_size) - now served from blob storage"
          fi
          
          # Remove any cache or temporary files
          find . -name "*.log" -delete
          find . -name ".DS_Store" -delete
          find . -name "*.tmp" -delete
          
          # Show what will be uploaded (excluding node_modules for brevity)  
          echo "üìÅ Optimized deployment package:"
          echo "  Source code: $(du -sh src | cut -f1)"
          echo "  Public assets: $(du -sh public | cut -f1)"
          echo "  Package files: $(du -sh package*.json | cut -f1 | head -1)"
          echo "  Config files: $(find . -maxdepth 1 -name "*.config.*" -o -name "tsconfig.json" | wc -l) files"
          
          # Calculate and display total upload size (excluding node_modules which Azure will reinstall)
          total_size=$(du -sh --exclude=node_modules --exclude=.git . | cut -f1)
          echo "üì¶ Total upload size (excluding node_modules): $total_size"
          echo "üéØ Excalidraw files now served from Azure Blob Storage CDN"

      - name: Deploy to Azure Static Web Apps
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_POLITE_FLOWER_07D4D8403 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/web"
          output_location: "build"
          skip_api_build: true
          # Set build command with environment variables
          app_build_command: "REACT_APP_USE_BLOB_STORAGE=true REACT_APP_BLOB_STORAGE_URL=${{ secrets.AZURE_BLOB_STORAGE_URL }} npm run build"
        env:
          # Configure the web app to use blob storage for Excalidraw files
          REACT_APP_USE_BLOB_STORAGE: "true"
          REACT_APP_BLOB_STORAGE_URL: ${{ secrets.AZURE_BLOB_STORAGE_URL }}

      - name: Deployment summary
        if: success()
        run: |
          echo "üéâ Fluent Jot web app deployed successfully!"
          echo "üí¨ Deployment message: $DEPLOYMENT_MESSAGE"
          echo "üåê Application URL: ${{ steps.builddeploy.outputs.static_web_app_url }}"
          echo "üìä Web app optimized for blob storage architecture"
          echo "‚òÅÔ∏è Excalidraw files served from: https://fluentjotdesign.blob.core.windows.net/excalidraw-assets/"
          
          # Show final web directory size
          cd web
          web_size=$(du -sh --exclude=node_modules --exclude=.git . | cut -f1)
          echo "üì¶ Final web app size: $web_size"