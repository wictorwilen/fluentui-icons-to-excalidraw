name: Deploy Excalidraw Assets to Azure Blob Storage

on:
  # Manual deployment
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild from source SVGs (ignore releases)'
        required: false
        default: false
        type: boolean
      deployment_message:
        description: 'Deployment message'
        required: false
        default: 'Manual blob storage deployment'
        type: string

env:
  PYTHON_VERSION: '3.9'

jobs:
  deploy_assets:
    runs-on: ubuntu-latest
    name: Deploy Excalidraw Assets to Blob Storage
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up environment variables
        run: |
          echo "FORCE_REBUILD=${{ github.event.inputs.force_rebuild }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_MESSAGE=${{ github.event.inputs.deployment_message }}" >> $GITHUB_ENV
          echo "üîß Environment configured for blob storage deployment"

      - name: Download pre-built Excalidraw artifacts from latest release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üì¶ Downloading pre-built Excalidraw artifacts from latest release..."
          
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "üîÑ Force rebuild requested - will regenerate from source SVGs"
            
            # Install Python dependencies for SVG processing
            echo "üêç Setting up Python dependencies..."
            python -m pip install --upgrade pip
            
            if [ -f "requirements.txt" ]; then
              echo "üìã Installing from requirements.txt..."
              pip install -r requirements.txt
              echo "‚úÖ Installed Python dependencies"
            else
              echo "‚ùå requirements.txt not found"
              exit 1
            fi
            
            # Create directories
            mkdir -p metadata vendor/icons vendor/emojis
            
            # Fetch icons and emojis
            echo "üì• Downloading Fluent UI icons and metadata..."
            python3 scripts/fetch_icons.py \
              --output metadata/icons.json \
              --download-dir vendor/icons \
              --force
            
            echo "üòÄ Downloading Fluent UI emojis and metadata..."
            python3 scripts/fetch_emojis.py \
              --output metadata/emojis.json \
              --download-dir vendor/emojis \
              --force \
              --preferred-style flat
            
            # Generate Excalidraw files
            echo "üé® Generating icon Excalidraw files..."
            python3 scripts/svg_to_excalidraw.py \
              --input-dir vendor/icons/assets \
              --output-dir artifacts/excalidraw
            
            echo "üòÄ Generating emoji Excalidraw files..."
            python3 scripts/emoji_to_excalidraw.py \
              --input-dir vendor/emojis/assets \
              --output-dir artifacts/excalidraw_emojis
              
            excalidraw_icon_count=$(find artifacts/excalidraw -name '*.excalidraw' | wc -l)
            excalidraw_emoji_count=$(find artifacts/excalidraw_emojis -name '*.excalidraw' | wc -l)
            echo "‚úÖ Generated $excalidraw_icon_count icon files and $excalidraw_emoji_count emoji files from source"
          else
            echo "üöÄ Using optimized release artifacts download..."
            
            # Get the latest release
            LATEST_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            
            RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
            echo "üìã Latest release: $RELEASE_TAG"
            
            # Download the pre-built excalidraw scenes
            SCENES_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("excalidraw-scenes-")) | .browser_download_url')
            EMOJI_SCENES_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("excalidraw-emoji-scenes-")) | .browser_download_url')
            
            if [ "$SCENES_URL" != "null" ] && [ "$EMOJI_SCENES_URL" != "null" ]; then
              echo "üì• Downloading icon scenes from: $SCENES_URL"
              curl -L -H "Authorization: token $GITHUB_TOKEN" "$SCENES_URL" -o excalidraw-scenes.zip
              
              echo "üì• Downloading emoji scenes from: $EMOJI_SCENES_URL"
              curl -L -H "Authorization: token $GITHUB_TOKEN" "$EMOJI_SCENES_URL" -o excalidraw-emoji-scenes.zip
              
              # Extract the archives
              echo "üìÇ Extracting icon scenes..."
              unzip -q excalidraw-scenes.zip
              
              echo "üìÇ Extracting emoji scenes..."
              unzip -q excalidraw-emoji-scenes.zip
              
              # Clean up zip files
              rm excalidraw-scenes.zip excalidraw-emoji-scenes.zip
              
              # Verify extraction
              if [ -d "artifacts/excalidraw" ] && [ -d "artifacts/excalidraw_emojis" ]; then
                excalidraw_icon_count=$(find artifacts/excalidraw -name '*.excalidraw' | wc -l)
                excalidraw_emoji_count=$(find artifacts/excalidraw_emojis -name '*.excalidraw' | wc -l)
                echo "‚úÖ Successfully extracted $excalidraw_icon_count icon files and $excalidraw_emoji_count emoji files"
                
                if [ "$excalidraw_icon_count" -eq 0 ] || [ "$excalidraw_emoji_count" -eq 0 ]; then
                  echo "‚ùå No Excalidraw files found after extraction"
                  exit 1
                fi
              else
                echo "‚ùå Extraction failed - artifacts directories not found"
                exit 1
              fi
            else
              echo "‚ùå Could not find all required release artifacts URLs"
              echo "   Scenes: $SCENES_URL"
              echo "   Emoji scenes: $EMOJI_SCENES_URL"
              exit 1
            fi
          fi

      - name: Upload Excalidraw files to Azure Blob Storage
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
        run: |
          echo "‚òÅÔ∏è Uploading Excalidraw files to Azure Blob Storage..."
          
          # Install Azure CLI if not present
          if ! command -v az &> /dev/null; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          fi
          
          # Check if we have artifacts to upload
          if [ -d "artifacts/excalidraw" ] && [ -d "artifacts/excalidraw_emojis" ]; then
            # Create container if it doesn't exist (with public read access)
            az storage container create \
              --name excalidraw-assets \
              --public-access blob \
              --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
              --output none || true
            
            # Calculate sizes before upload
            icon_size=$(du -sh artifacts/excalidraw | cut -f1)
            emoji_size=$(du -sh artifacts/excalidraw_emojis | cut -f1)
            total_size=$(du -sh artifacts/excalidraw artifacts/excalidraw_emojis | tail -1 | cut -f1)
            
            echo "üìä Upload statistics:"
            echo "   - Icon files: $icon_size"
            echo "   - Emoji files: $emoji_size"
            echo "   - Total size: $total_size"
            
            # Upload icon files
            echo "üìÅ Uploading icon Excalidraw files..."
            az storage blob upload-batch \
              --destination excalidraw-assets \
              --source artifacts/excalidraw \
              --destination-path icons/ \
              --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
              --overwrite \
              --output none
            
            # Upload emoji files  
            echo "üòÄ Uploading emoji Excalidraw files..."
            az storage blob upload-batch \
              --destination excalidraw-assets \
              --source artifacts/excalidraw_emojis \
              --destination-path emojis/ \
              --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
              --overwrite \
              --output none
            
            # Count uploaded files
            icon_count=$(find artifacts/excalidraw -name '*.excalidraw' | wc -l)
            emoji_count=$(find artifacts/excalidraw_emojis -name '*.excalidraw' | wc -l)
            total_files=$((icon_count + emoji_count))
            
            echo "‚úÖ Successfully uploaded $total_files Excalidraw files to blob storage"
            echo "   - Icons: $icon_count files"  
            echo "   - Emojis: $emoji_count files"
            echo "üåê Files accessible at: https://fluentjotdesign.blob.core.windows.net/excalidraw-assets/"
          else
            echo "‚ùå No Excalidraw artifacts found to upload"
            exit 1
          fi

      - name: Deployment summary
        if: success()
        run: |
          echo "‚òÅÔ∏è Blob storage deployment completed successfully!"
          echo "üí¨ Deployment message: $DEPLOYMENT_MESSAGE"
          echo "üåê Assets URL: https://fluentjotdesign.blob.core.windows.net/excalidraw-assets/"
          echo "üìÅ Container: excalidraw-assets"
          echo "üé® Icons path: icons/"
          echo "üòÄ Emojis path: emojis/"
          
          # Show file counts
          if [ -d "artifacts/excalidraw" ] && [ -d "artifacts/excalidraw_emojis" ]; then
            icon_count=$(find artifacts/excalidraw -name '*.excalidraw' | wc -l)
            emoji_count=$(find artifacts/excalidraw_emojis -name '*.excalidraw' | wc -l)
            echo "üìä Uploaded: $icon_count icons + $emoji_count emojis = $((icon_count + emoji_count)) total files"
          fi